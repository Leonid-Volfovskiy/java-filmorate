DROP TABLE IF EXISTS users, films, friends, films_genres, genres, mpa, likes CASCADE;

create table if not exists users (
    user_id INTEGER generated by default as identity primary key,
    email CHARACTER VARYING(60) not null,
    login CHARACTER VARYING(60) not null,
    name CHARACTER VARYING(60) not null,
    birthday DATE not null
);

create unique index if not exists user_email_uindex on users (email);
create unique index if not exists user_login_uindex on users (login);

create table if not exists mpa (
    rate_id INTEGER not null,
    mpa_name CHARACTER VARYING(30) not null,
    PRIMARY KEY (rate_id)
);

create table if not exists genres (
    genre_id INTEGER UNIQUE NOT NULL,
    genre_name VARCHAR(60) NOT NULL,
    PRIMARY KEY (genre_id)
);

create table if not exists films (
    film_id INTEGER generated by default as identity primary key,
    name CHARACTER VARYING(100) not null,
    description CHARACTER VARYING(200) not null,
    release_date DATE not null,
    duration INTEGER not null,
    rate_id INTEGER REFERENCES mpa (rate_id) ON DELETE SET NULL,
    rate INTEGER
);

create table if not exists friends (
    user_id INTEGER REFERENCES users(user_id) ON DELETE CASCADE,
    friend_id INTEGER REFERENCES users(user_id) ON DELETE CASCADE,
    PRIMARY KEY (user_id, friend_id)
);

create table if not exists film_genres (
    film_id INTEGER REFERENCES films (film_id) ON DELETE SET NULL,
    genre_id INTEGER REFERENCES genres (genre_id) ON DELETE CASCADE,
    PRIMARY KEY (film_id, genre_id)
);

create table if not exists likes (
    film_id INTEGER REFERENCES films (film_id) ON DELETE CASCADE,
    user_id INTEGER REFERENCES users (user_id) ON DELETE CASCADE,
    PRIMARY KEY (film_id, user_id)
);